{"version":3,"sources":["logo.svg","SearchForm.js","EventsHourlyTable.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","SearchForm","props","state","value","handleChange","bind","handleSubmit","event","console","log","target","this","setState","newValue","onChange","type","Component","EventsHourlyTable","search","isSelected","date","dateData","forEach","element","tableData","Fuse","shouldSort","threshold","location","distance","maxPatternLength","minMatchCharLength","keys","className","Table","celled","Header","Row","HeaderCell","Body","map","dataCell","index","Cell","hour","events","App","token","window","eventsHourly","JSON","parse","replace","eventsDaily","statsHourly","statsDaily","poiInfo","Boolean","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"js/main.0ad62b49.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"media/logo.5d5d9eef.svg\";","import React, { Component } from 'react';\r\nimport { Icon, Label, Menu, Table } from 'semantic-ui-react'\r\nimport './Tables.css';\r\n\r\nclass SearchForm extends Component{\r\n  constructor(props){\r\n    super(props);\r\n\r\n    this.state = {\r\n        value:''\r\n    };\r\n\r\n    this.handleChange = this.handleChange.bind(this);\r\n    this.handleSubmit = this.handleSubmit.bind(this);\r\n  }\r\n\r\n  handleChange(event) {\r\n    console.log(event.target.value);\r\n    this.setState({value: event.target.value});\r\n    this.handleSubmit(event.target.value);\r\n  }\r\n\r\n  handleSubmit(newValue) {\r\n      console.log(\"Searching: \" + newValue);\r\n      this.props.onChange(newValue);\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div>\r\n            <form>\r\n                <input type=\"text\" value={this.state.value} onChange={this.handleChange} />\r\n            </form>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default SearchForm;\r\n\r\n","import React, { Component } from 'react';\r\nimport { Icon, Label, Menu, Table } from 'semantic-ui-react'\r\nimport './Tables.css';\r\nimport SearchForm from './SearchForm';\r\nimport * as Fuse from 'fuse.js';\r\n\r\nclass EventsHourlyTable extends Component{\r\n\r\n  constructor(props){\r\n    super(props);\r\n    this.state = {\r\n        tableData: this.props.tableData,\r\n        search: ''\r\n    };\r\n  }\r\n\r\n  onChange = (value) => {\r\n      this.setState({search: value});\r\n      console.log(\"EventsHourlyTable's search value: \" + value);\r\n  }\r\n\r\n  isSelected = (date, dateData) => {\r\n    dateData.forEach(element => {\r\n        if (element === date){\r\n            console.log(\"Element found\");\r\n            return true;\r\n        }\r\n    });\r\n    return false;\r\n  }\r\n\r\n  render() {\r\n    var options = {\r\n        shouldSort: true,\r\n        threshold: 0,\r\n        location: 0,\r\n        distance: 100,\r\n        maxPatternLength: 32,\r\n        minMatchCharLength: 1,\r\n        keys: [\r\n          \"date\"\r\n        ]\r\n      };\r\n      var fuse = new Fuse(this.state.tableData, options); // \"list\" is the item array\r\n      var dateData = fuse.search(this.state.search);\r\n      console.log('Date Data: ' + dateData);\r\n    return (\r\n      <div className=\"Data-table\">\r\n        <SearchForm onChange={this.onChange}/>\r\n        <Table celled>\r\n            <Table.Header>\r\n                <Table.Row>\r\n                    EventsHourlyTable\r\n                </Table.Row>\r\n                <Table.Row>\r\n                    <Table.HeaderCell>Date</Table.HeaderCell>\r\n                    <Table.HeaderCell>Hour</Table.HeaderCell>\r\n                    <Table.HeaderCell>Events</Table.HeaderCell>\r\n                </Table.Row>\r\n            </Table.Header>\r\n\r\n            <Table.Body>\r\n                {\r\n                    this.state.tableData.map((dataCell, index) => (\r\n                        <Table.Row className={(this.isSelected(dataCell.date, dateData)?\"Data-row-selected\":\"Data-row-unselected\")}>\r\n                            <Table.Cell>{dataCell.date}</Table.Cell>\r\n                            <Table.Cell>{dataCell.hour}</Table.Cell>\r\n                            <Table.Cell>{dataCell.events}</Table.Cell>\r\n                        </Table.Row>\r\n                    ))\r\n                }\r\n            </Table.Body>\r\n\r\n        </Table>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default EventsHourlyTable;\r\n\r\n","import React, { Component } from 'react';\r\nimport logo from './logo.svg';\r\nimport './App.css';\r\nimport EventsHourlyTable from './EventsHourlyTable'\r\n\r\nclass App extends Component{\r\n  constructor(props){\r\n    super(props);\r\n    this.state = {\r\n      token: window.token,\r\n      eventsHourly: JSON.parse(window.eventsHourly.replace(/&#34;/g, \"\\\"\")),\r\n      eventsDaily: JSON.parse(window.eventsDaily.replace(/&#34;/g, \"\\\"\")),\r\n      statsHourly: JSON.parse(window.statsHourly.replace(/&#34;/g, \"\\\"\")),\r\n      statsDaily: JSON.parse(window.statsDaily.replace(/&#34;/g, \"\\\"\")),\r\n      poiInfo: JSON.parse(window.poiInfo.replace(/&#34;/g, \"\\\"\"))};\r\n\r\n    console.log(\"Rendering Events Hourly Table...\");\r\n    console.log(this.state.token);\r\n    console.log(this.state.eventsHourly);\r\n    console.log(this.state.eventsDaily);\r\n    console.log(this.state.statsHourly);\r\n    console.log(this.state.statsDaily);\r\n    console.log(this.state.poiInfo);\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"App\">\r\n        <header className=\"App-header\">\r\n          <h1>EQWorks Product Development Application: UI Interface</h1>\r\n          <div className=\"Visuals\">\r\n            <EventsHourlyTable tableData={this.state.eventsHourly}/>\r\n          </div>\r\n        </header>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App \n    token={ window.token }\n    eventsHourly={ window.eventsHourly }\n    eventsDaily={ window.eventsDaily }\n    statsHourly={ window.statsHourly } \n    statsDaily={ window.statsDaily }\n    poiInfo={ window.poiInfo }\n    />, \n    document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}